{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/samueltang/Desktop/Aster/frontend-mobile/App.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport \"./global\";\nimport { web3, kit } from \"./root\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport View from \"react-native-web/dist/exports/View\";\nimport YellowBox from \"react-native-web/dist/exports/YellowBox\";\nimport { requestTxSig, waitForSignedTxs, requestAccountAddress, waitForAccountAuth, FeeCurrency } from '@celo/dappkit';\nimport * as Linking from 'expo-linking';\nimport CeloDAppKit from \"./celo-dappkit\";\nimport TaskList from \"./pages/TaskList\";\nYellowBox.ignoreWarnings(['Warning: The provided value \\'moz', 'Warning: The provided value \\'ms-stream']);\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#35d07f',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  title: {\n    marginVertical: 8,\n    fontSize: 20,\n    fontWeight: 'bold'\n  }\n});\n\nvar App = function App() {\n  var _useState = useState('Not logged in'),\n      _useState2 = _slicedToArray(_useState, 2),\n      address = _useState2[0],\n      setAddress = _useState2[1];\n\n  var _useState3 = useState('Not logged in'),\n      _useState4 = _slicedToArray(_useState3, 2),\n      phoneNumber = _useState4[0],\n      setPhoneNumber = _useState4[1];\n\n  var _useState5 = useState('Not logged in'),\n      _useState6 = _slicedToArray(_useState5, 2),\n      cUSDBalance = _useState6[0],\n      setcUSDBalance = _useState6[1];\n\n  var _useState7 = useState(true),\n      _useState8 = _slicedToArray(_useState7, 2),\n      isLoadingBalance = _useState8[0],\n      setIsLoadingBalance = _useState8[1];\n\n  var login = function login() {\n    var requestId, dappName, callback, dappkitResponse, stableToken, cUSDBalanceBig, ERC20_DECIMALS, cUSDBalanceDec, cUSDBalance;\n    return _regeneratorRuntime.async(function login$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            requestId = 'login';\n            dappName = 'Hello Celo';\n            callback = Linking.makeUrl('/my/path');\n            requestAccountAddress({\n              requestId: requestId,\n              dappName: dappName,\n              callback: callback\n            });\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(waitForAccountAuth(requestId));\n\n          case 6:\n            dappkitResponse = _context.sent;\n            kit.defaultAccount = dappkitResponse.address;\n            _context.next = 10;\n            return _regeneratorRuntime.awrap(kit.contracts.getStableToken());\n\n          case 10:\n            stableToken = _context.sent;\n            _context.next = 13;\n            return _regeneratorRuntime.awrap(stableToken.balanceOf(kit.defaultAccount));\n\n          case 13:\n            cUSDBalanceBig = _context.sent;\n            ERC20_DECIMALS = 18;\n            cUSDBalanceDec = cUSDBalanceBig.shiftedBy(-ERC20_DECIMALS).toFixed(2);\n            cUSDBalance = cUSDBalanceDec.toString();\n            setcUSDBalance(cUSDBalance);\n            setIsLoadingBalance(false);\n            setAddress(dappkitResponse.address);\n            setPhoneNumber(dappkitResponse.phoneNumber);\n\n          case 21:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, React.createElement(TaskList, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/samueltang/Desktop/Aster/frontend-mobile/App.js"],"names":["React","useState","useEffect","web3","kit","requestTxSig","waitForSignedTxs","requestAccountAddress","waitForAccountAuth","FeeCurrency","Linking","CeloDAppKit","TaskList","YellowBox","ignoreWarnings","styles","StyleSheet","create","container","flex","backgroundColor","alignItems","justifyContent","title","marginVertical","fontSize","fontWeight","App","address","setAddress","phoneNumber","setPhoneNumber","cUSDBalance","setcUSDBalance","isLoadingBalance","setIsLoadingBalance","login","requestId","dappName","callback","makeUrl","dappkitResponse","defaultAccount","contracts","getStableToken","stableToken","balanceOf","cUSDBalanceBig","ERC20_DECIMALS","cUSDBalanceDec","shiftedBy","toFixed","toString"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './global'\nimport { web3, kit } from './root'\nimport { Image, StyleSheet, Text, TextInput, Button, View, YellowBox } from 'react-native'\nimport {   \n  requestTxSig,\n  waitForSignedTxs,\n  requestAccountAddress,\n  waitForAccountAuth,\n  FeeCurrency\n} from '@celo/dappkit'\nimport * as Linking from 'expo-linking'\nimport CeloDAppKit from './celo-dappkit'\nimport TaskList from './pages/TaskList'\n\nYellowBox.ignoreWarnings(['Warning: The provided value \\'moz', 'Warning: The provided value \\'ms-stream'])\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#35d07f',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    marginVertical: 8, \n    fontSize: 20, \n    fontWeight: 'bold'\n  }\n});\n\nconst App = () => {\n\n  // Set the defaults for the state\n  const [address, setAddress] = useState('Not logged in');\n  const [phoneNumber, setPhoneNumber] = useState('Not logged in');\n  const [cUSDBalance, setcUSDBalance] = useState('Not logged in');\n  const [isLoadingBalance, setIsLoadingBalance] = useState(true);\n\n\n  const login = async () => {\n    \n    // A string you can pass to DAppKit, that you can use to listen to the response for that request\n    const requestId = 'login'\n    \n    // A string that will be displayed to the user, indicating the DApp requesting access/signature\n    const dappName = 'Hello Celo'\n    \n    // The deeplink that the Celo Wallet will use to redirect the user back to the DApp with the appropriate payload.\n    const callback = Linking.makeUrl('/my/path')\n  \n    // Ask the Celo Alfajores Wallet for user info\n    requestAccountAddress({\n      requestId,\n      dappName,\n      callback,\n    })\n  \n    // Wait for the Celo Wallet response\n    const dappkitResponse = await waitForAccountAuth(requestId)\n\n    // Set the default account to the account returned from the wallet\n    kit.defaultAccount = dappkitResponse.address\n\n    // Get the stabel token contract\n    const stableToken = await kit.contracts.getStableToken()\n\n    // Get the user account balance (cUSD)\n    const cUSDBalanceBig = await stableToken.balanceOf(kit.defaultAccount)\n    \n    // Convert from a big number to a string by rounding it to the appropriate number of decimal places\n    const ERC20_DECIMALS = 18\n    let cUSDBalanceDec = cUSDBalanceBig.shiftedBy(-ERC20_DECIMALS).toFixed(2)\n    let cUSDBalance = cUSDBalanceDec.toString()\n    \n    // Update state\n    setcUSDBalance(cUSDBalance);\n    setIsLoadingBalance(false);\n    setAddress(dappkitResponse.address);\n    setPhoneNumber(dappkitResponse.phoneNumber);\n  }\n\n  return (\n    <View style={styles.container}>\n\n      {/* <CeloDAppKit /> */}\n      {/* <Text style={styles.title}>Login first</Text>\n      <Button title=\"login()\" \n        onPress={()=> login()} />\n      <Text style={styles.title}>Account Info:</Text>\n      <Text>Current Account Address:</Text>\n      <Text>{address}</Text>\n      <Text>Phone number: {phoneNumber}</Text>\n      <Text>cUSD Balance: {cUSDBalance}</Text> */}\n      <TaskList />\n    </View>\n  );\n  \n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}