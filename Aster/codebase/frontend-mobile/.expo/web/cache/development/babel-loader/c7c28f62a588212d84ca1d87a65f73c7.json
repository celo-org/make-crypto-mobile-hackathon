{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/samueltang/Desktop/Aster/frontend-mobile/celo-dappkit.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport \"./global\";\nimport { web3, kit } from \"./root\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport View from \"react-native-web/dist/exports/View\";\nimport YellowBox from \"react-native-web/dist/exports/YellowBox\";\nimport { requestTxSig, waitForSignedTxs, requestAccountAddress, waitForAccountAuth, FeeCurrency } from '@celo/dappkit';\nimport { toTxResult } from \"@celo/connect\";\nimport * as Linking from 'expo-linking';\nimport HelloWorldContract from \"./contracts/HelloWorld.json\";\nYellowBox.ignoreWarnings(['Warning: The provided value \\'moz', 'Warning: The provided value \\'ms-stream']);\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#35d07f',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  title: {\n    marginVertical: 8,\n    fontSize: 20,\n    fontWeight: 'bold'\n  }\n});\n\nvar CeloDAppKit = function CeloDAppKit() {\n  var _useState = useState('Not logged in'),\n      _useState2 = _slicedToArray(_useState, 2),\n      address = _useState2[0],\n      setAddress = _useState2[1];\n\n  var _useState3 = useState('Not logged in'),\n      _useState4 = _slicedToArray(_useState3, 2),\n      phoneNumber = _useState4[0],\n      setPhoneNumber = _useState4[1];\n\n  var _useState5 = useState('Not logged in'),\n      _useState6 = _slicedToArray(_useState5, 2),\n      cUSDBalance = _useState6[0],\n      setcUSDBalance = _useState6[1];\n\n  var _useState7 = useState({}),\n      _useState8 = _slicedToArray(_useState7, 2),\n      helloWorldContract = _useState8[0],\n      setHelloWorldContract = _useState8[1];\n\n  var _useState9 = useState(''),\n      _useState10 = _slicedToArray(_useState9, 2),\n      contractName = _useState10[0],\n      setContractName = _useState10[1];\n\n  var _useState11 = useState(''),\n      _useState12 = _slicedToArray(_useState11, 2),\n      textInput = _useState12[0],\n      setTextInput = _useState12[1];\n\n  var _useState13 = useState(true),\n      _useState14 = _slicedToArray(_useState13, 2),\n      isLoadingBalance = _useState14[0],\n      setIsLoadingBalance = _useState14[1];\n\n  useEffect(function () {\n    function setup() {\n      var networkId, deployedNetwork, instance;\n      return _regeneratorRuntime.async(function setup$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(web3.eth.net.getId());\n\n            case 2:\n              networkId = _context.sent;\n              deployedNetwork = HelloWorldContract.networks[networkId];\n              instance = new web3.eth.Contract(HelloWorldContract.abi, deployedNetwork && deployedNetwork.address);\n              setHelloWorldContract(instance);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    ;\n    setup();\n  }, []);\n\n  var login = function login() {\n    var requestId, dappName, callback, dappkitResponse, stableToken, cUSDBalanceBig, ERC20_DECIMALS, cUSDBalanceDec, cUSDBalance;\n    return _regeneratorRuntime.async(function login$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            requestId = 'login';\n            dappName = 'Hello Celo';\n            callback = Linking.makeUrl('/my/path');\n            requestAccountAddress({\n              requestId: requestId,\n              dappName: dappName,\n              callback: callback\n            });\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(waitForAccountAuth(requestId));\n\n          case 6:\n            dappkitResponse = _context2.sent;\n            kit.defaultAccount = dappkitResponse.address;\n            _context2.next = 10;\n            return _regeneratorRuntime.awrap(kit.contracts.getStableToken());\n\n          case 10:\n            stableToken = _context2.sent;\n            _context2.next = 13;\n            return _regeneratorRuntime.awrap(stableToken.balanceOf(kit.defaultAccount));\n\n          case 13:\n            cUSDBalanceBig = _context2.sent;\n            ERC20_DECIMALS = 18;\n            cUSDBalanceDec = cUSDBalanceBig.shiftedBy(-ERC20_DECIMALS).toFixed(2);\n            cUSDBalance = cUSDBalanceDec.toString();\n            setcUSDBalance(cUSDBalance);\n            setIsLoadingBalance(false);\n            setAddress(dappkitResponse.address);\n            setPhoneNumber(dappkitResponse.phoneNumber);\n\n          case 21:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var read = function read() {\n    var name;\n    return _regeneratorRuntime.async(function read$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(helloWorldContract.methods.getName().call());\n\n          case 2:\n            name = _context3.sent;\n            setContractName(name);\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var write = function write() {\n    var requestId, dappName, callback, txObject, dappkitResponse, tx, result;\n    return _regeneratorRuntime.async(function write$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            requestId = 'update_name';\n            dappName = 'Hello Celo';\n            callback = Linking.makeUrl('/my/path');\n            _context4.next = 5;\n            return _regeneratorRuntime.awrap(helloWorldContract.methods.setName(textInput));\n\n          case 5:\n            txObject = _context4.sent;\n            requestTxSig(kit, [{\n              from: address,\n              to: helloWorldContract.options.address,\n              tx: txObject,\n              feeCurrency: FeeCurrency.cUSD\n            }], {\n              requestId: requestId,\n              dappName: dappName,\n              callback: callback\n            });\n            _context4.next = 9;\n            return _regeneratorRuntime.awrap(waitForSignedTxs(requestId));\n\n          case 9:\n            dappkitResponse = _context4.sent;\n            tx = dappkitResponse.rawTxs[0];\n            _context4.next = 13;\n            return _regeneratorRuntime.awrap(toTxResult(kit.web3.eth.sendSignedTransaction(tx)).waitReceipt());\n\n          case 13:\n            result = _context4.sent;\n            console.log(\"Hello World contract update transaction receipt: \", result);\n\n          case 15:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var _onChangeText = function onChangeText(text) {\n    return _regeneratorRuntime.async(function onChangeText$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            setTextInput(text);\n\n          case 1:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 5\n    }\n  }, React.createElement(Image, {\n    resizeMode: \"contain\",\n    source: require(\"./assets/white-wallet-rings.png\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }\n  }), React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }\n  }, \"Open up client/App.js to start working on your app!\"), React.createElement(Text, {\n    style: styles.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }\n  }, \"Login first\"), React.createElement(Button, {\n    title: \"login()\",\n    onPress: function onPress() {\n      return login();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }\n  }), React.createElement(Text, {\n    style: styles.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 15\n    }\n  }, \"Account Info:\"), React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }\n  }, \"Current Account Address:\"), React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }\n  }, address), React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }\n  }, \"Phone number: \", phoneNumber), React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }\n  }, \"cUSD Balance: \", cUSDBalance), React.createElement(Text, {\n    style: styles.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }\n  }, \"Read HelloWorld\"), React.createElement(Button, {\n    title: \"Read Contract Name\",\n    onPress: function onPress() {\n      return read();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }\n  }), React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }\n  }, \"Contract Name: \", contractName), React.createElement(Text, {\n    style: styles.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }\n  }, \"Write to HelloWorld\"), React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }\n  }, \"New contract name:\"), React.createElement(TextInput, {\n    style: {\n      borderColor: 'black',\n      borderWidth: 1,\n      backgroundColor: 'white'\n    },\n    placeholder: \"input new name here\",\n    onChangeText: function onChangeText(text) {\n      return _onChangeText(text);\n    },\n    value: textInput,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }\n  }), React.createElement(Button, {\n    style: {\n      padding: 30\n    },\n    title: \"update contract name\",\n    onPress: function onPress() {\n      return write();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default CeloDAppKit;","map":{"version":3,"sources":["/Users/samueltang/Desktop/Aster/frontend-mobile/celo-dappkit.js"],"names":["React","useState","useEffect","web3","kit","requestTxSig","waitForSignedTxs","requestAccountAddress","waitForAccountAuth","FeeCurrency","toTxResult","Linking","HelloWorldContract","YellowBox","ignoreWarnings","styles","StyleSheet","create","container","flex","backgroundColor","alignItems","justifyContent","title","marginVertical","fontSize","fontWeight","CeloDAppKit","address","setAddress","phoneNumber","setPhoneNumber","cUSDBalance","setcUSDBalance","helloWorldContract","setHelloWorldContract","contractName","setContractName","textInput","setTextInput","isLoadingBalance","setIsLoadingBalance","setup","eth","net","getId","networkId","deployedNetwork","networks","instance","Contract","abi","login","requestId","dappName","callback","makeUrl","dappkitResponse","defaultAccount","contracts","getStableToken","stableToken","balanceOf","cUSDBalanceBig","ERC20_DECIMALS","cUSDBalanceDec","shiftedBy","toFixed","toString","read","methods","getName","call","name","write","setName","txObject","from","to","options","tx","feeCurrency","cUSD","rawTxs","sendSignedTransaction","waitReceipt","result","console","log","onChangeText","text","require","borderColor","borderWidth","padding"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './global'\nimport { web3, kit } from './root'\nimport { Image, StyleSheet, Text, TextInput, Button, View, YellowBox } from 'react-native'\nimport {   \n  requestTxSig,\n  waitForSignedTxs,\n  requestAccountAddress,\n  waitForAccountAuth,\n  FeeCurrency\n} from '@celo/dappkit'\nimport { toTxResult } from \"@celo/connect\"\nimport * as Linking from 'expo-linking'\nimport HelloWorldContract from './contracts/HelloWorld.json'\n\nYellowBox.ignoreWarnings(['Warning: The provided value \\'moz', 'Warning: The provided value \\'ms-stream'])\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#35d07f',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    marginVertical: 8, \n    fontSize: 20, \n    fontWeight: 'bold'\n  }\n});\n\nconst CeloDAppKit = () => {\n\n  // Set the defaults for the state\n  const [address, setAddress] = useState('Not logged in');\n  const [phoneNumber, setPhoneNumber] = useState('Not logged in');\n  const [cUSDBalance, setcUSDBalance] = useState('Not logged in');\n  const [helloWorldContract, setHelloWorldContract] = useState({});\n  const [contractName, setContractName] = useState('');\n  const [textInput, setTextInput] = useState('');\n  const [isLoadingBalance, setIsLoadingBalance] = useState(true);\n\n\n  useEffect(() => {\n    async function setup(){\n      // Check the Celo network ID\n      const networkId = await web3.eth.net.getId();\n      \n      // Get the deployed HelloWorld contract info for the appropriate network ID\n      const deployedNetwork = HelloWorldContract.networks[networkId];\n\n      // Create a new contract instance with the HelloWorld contract info\n      const instance = new web3.eth.Contract(\n        HelloWorldContract.abi,\n        deployedNetwork && deployedNetwork.address\n      );\n\n      // Save the contract instance\n      setHelloWorldContract(instance);\n    };\n\n    setup();\n  }, []);\n\n  const login = async () => {\n    \n    // A string you can pass to DAppKit, that you can use to listen to the response for that request\n    const requestId = 'login'\n    \n    // A string that will be displayed to the user, indicating the DApp requesting access/signature\n    const dappName = 'Hello Celo'\n    \n    // The deeplink that the Celo Wallet will use to redirect the user back to the DApp with the appropriate payload.\n    const callback = Linking.makeUrl('/my/path')\n  \n    // Ask the Celo Alfajores Wallet for user info\n    requestAccountAddress({\n      requestId,\n      dappName,\n      callback,\n    })\n  \n    // Wait for the Celo Wallet response\n    const dappkitResponse = await waitForAccountAuth(requestId)\n\n    // Set the default account to the account returned from the wallet\n    kit.defaultAccount = dappkitResponse.address\n\n    // Get the stabel token contract\n    const stableToken = await kit.contracts.getStableToken()\n\n    // Get the user account balance (cUSD)\n    const cUSDBalanceBig = await stableToken.balanceOf(kit.defaultAccount)\n    \n    // Convert from a big number to a string by rounding it to the appropriate number of decimal places\n    const ERC20_DECIMALS = 18\n    let cUSDBalanceDec = cUSDBalanceBig.shiftedBy(-ERC20_DECIMALS).toFixed(2)\n    let cUSDBalance = cUSDBalanceDec.toString()\n    \n    // Update state\n    setcUSDBalance(cUSDBalance);\n    setIsLoadingBalance(false);\n    setAddress(dappkitResponse.address);\n    setPhoneNumber(dappkitResponse.phoneNumber);\n  }\n\n  const read = async () => {\n    \n    // Read the name stored in the HelloWorld contract\n    let name = await helloWorldContract.methods.getName().call()\n    \n    // Update state\n    setContractName(name);\n  }\n\n  const write = async () => {\n    const requestId = 'update_name'\n    const dappName = 'Hello Celo'\n    const callback = Linking.makeUrl('/my/path')\n\n    // Create a transaction object to update the contract with the 'textInput'\n    const txObject = await helloWorldContract.methods.setName(textInput)\n\n    // Send a request to the Celo wallet to send an update transaction to the HelloWorld contract\n    requestTxSig(\n      kit,\n      [\n        {\n          from: address,\n          to: helloWorldContract.options.address,\n          tx: txObject,\n          feeCurrency: FeeCurrency.cUSD\n        }\n      ],\n      { requestId, dappName, callback }\n    )\n\n    // Get the response from the Celo wallet\n    const dappkitResponse = await waitForSignedTxs(requestId)\n    const tx = dappkitResponse.rawTxs[0]\n    \n    // Get the transaction result, once it has been included in the Celo blockchain\n    let result = await toTxResult(kit.web3.eth.sendSignedTransaction(tx)).waitReceipt()\n\n    console.log(`Hello World contract update transaction receipt: `, result)  \n  }\n\n  const onChangeText = async (text) => {\n    setTextInput(text);\n  }\n\n  \n  return (\n    <View style={styles.container}>\n      <Image resizeMode='contain' source={require(\"./assets/white-wallet-rings.png\")}></Image>\n      <Text>Open up client/App.js to start working on your app!</Text>\n      \n      <Text style={styles.title}>Login first</Text>\n      <Button title=\"login()\" \n        onPress={()=> login()} />\n              <Text style={styles.title}>Account Info:</Text>\n      <Text>Current Account Address:</Text>\n      <Text>{address}</Text>\n      <Text>Phone number: {phoneNumber}</Text>\n      <Text>cUSD Balance: {cUSDBalance}</Text>\n\n      <Text style={styles.title}>Read HelloWorld</Text>\n      <Button title=\"Read Contract Name\" \n        onPress={()=> read()} />\n      <Text>Contract Name: {contractName}</Text>\n      \n      <Text style={styles.title}>Write to HelloWorld</Text>\n      <Text>New contract name:</Text>\n      <TextInput\n        style={{  borderColor: 'black', borderWidth: 1, backgroundColor: 'white' }}\n        placeholder=\"input new name here\"\n        onChangeText={text => onChangeText(text)}\n        value={textInput}\n        />\n      <Button style={{padding: 30}} title=\"update contract name\" \n        onPress={()=> write()} />\n    </View>\n  );\n  \n}\n\nexport default CeloDAppKit;"]},"metadata":{},"sourceType":"module"}