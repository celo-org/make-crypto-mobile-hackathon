{"ast":null,"code":"'use strict';\n\nvar inherits = require('inherits');\n\nvar Buffer = require('safer-buffer').Buffer;\n\nvar DERDecoder = require(\"./der\");\n\nfunction PEMDecoder(entity) {\n  DERDecoder.call(this, entity);\n  this.enc = 'pem';\n}\n\ninherits(PEMDecoder, DERDecoder);\nmodule.exports = PEMDecoder;\n\nPEMDecoder.prototype.decode = function decode(data, options) {\n  var lines = data.toString().split(/[\\r\\n]+/g);\n  var label = options.label.toUpperCase();\n  var re = /^-----(BEGIN|END) ([^-]+)-----$/;\n  var start = -1;\n  var end = -1;\n\n  for (var i = 0; i < lines.length; i++) {\n    var match = lines[i].match(re);\n    if (match === null) continue;\n    if (match[2] !== label) continue;\n\n    if (start === -1) {\n      if (match[1] !== 'BEGIN') break;\n      start = i;\n    } else {\n      if (match[1] !== 'END') break;\n      end = i;\n      break;\n    }\n  }\n\n  if (start === -1 || end === -1) throw new Error('PEM section not found for: ' + label);\n  var base64 = lines.slice(start + 1, end).join('');\n  base64.replace(/[^a-z0-9+/=]+/gi, '');\n  var input = Buffer.from(base64, 'base64');\n  return DERDecoder.prototype.decode.call(this, input, options);\n};","map":{"version":3,"sources":["/usr/local/lib/node_modules/expo-cli/node_modules/asn1.js/lib/asn1/decoders/pem.js"],"names":["inherits","require","Buffer","DERDecoder","PEMDecoder","entity","call","enc","module","exports","prototype","decode","data","options","lines","toString","split","label","toUpperCase","re","start","end","i","length","match","Error","base64","slice","join","replace","input","from"],"mappings":"AAAA;;AAEA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACA,IAAMC,MAAM,GAAGD,OAAO,CAAC,cAAD,CAAP,CAAwBC,MAAvC;;AAEA,IAAMC,UAAU,GAAGF,OAAO,SAA1B;;AAEA,SAASG,UAAT,CAAoBC,MAApB,EAA4B;AAC1BF,EAAAA,UAAU,CAACG,IAAX,CAAgB,IAAhB,EAAsBD,MAAtB;AACA,OAAKE,GAAL,GAAW,KAAX;AACD;;AACDP,QAAQ,CAACI,UAAD,EAAaD,UAAb,CAAR;AACAK,MAAM,CAACC,OAAP,GAAiBL,UAAjB;;AAEAA,UAAU,CAACM,SAAX,CAAqBC,MAArB,GAA8B,SAASA,MAAT,CAAgBC,IAAhB,EAAsBC,OAAtB,EAA+B;AAC3D,MAAMC,KAAK,GAAGF,IAAI,CAACG,QAAL,GAAgBC,KAAhB,CAAsB,UAAtB,CAAd;AAEA,MAAMC,KAAK,GAAGJ,OAAO,CAACI,KAAR,CAAcC,WAAd,EAAd;AAEA,MAAMC,EAAE,GAAG,iCAAX;AACA,MAAIC,KAAK,GAAG,CAAC,CAAb;AACA,MAAIC,GAAG,GAAG,CAAC,CAAX;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,KAAK,CAACS,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,QAAME,KAAK,GAAGV,KAAK,CAACQ,CAAD,CAAL,CAASE,KAAT,CAAeL,EAAf,CAAd;AACA,QAAIK,KAAK,KAAK,IAAd,EACE;AAEF,QAAIA,KAAK,CAAC,CAAD,CAAL,KAAaP,KAAjB,EACE;;AAEF,QAAIG,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChB,UAAII,KAAK,CAAC,CAAD,CAAL,KAAa,OAAjB,EACE;AACFJ,MAAAA,KAAK,GAAGE,CAAR;AACD,KAJD,MAIO;AACL,UAAIE,KAAK,CAAC,CAAD,CAAL,KAAa,KAAjB,EACE;AACFH,MAAAA,GAAG,GAAGC,CAAN;AACA;AACD;AACF;;AACD,MAAIF,KAAK,KAAK,CAAC,CAAX,IAAgBC,GAAG,KAAK,CAAC,CAA7B,EACE,MAAM,IAAII,KAAJ,CAAU,gCAAgCR,KAA1C,CAAN;AAEF,MAAMS,MAAM,GAAGZ,KAAK,CAACa,KAAN,CAAYP,KAAK,GAAG,CAApB,EAAuBC,GAAvB,EAA4BO,IAA5B,CAAiC,EAAjC,CAAf;AAEAF,EAAAA,MAAM,CAACG,OAAP,CAAe,iBAAf,EAAkC,EAAlC;AAEA,MAAMC,KAAK,GAAG5B,MAAM,CAAC6B,IAAP,CAAYL,MAAZ,EAAoB,QAApB,CAAd;AACA,SAAOvB,UAAU,CAACO,SAAX,CAAqBC,MAArB,CAA4BL,IAA5B,CAAiC,IAAjC,EAAuCwB,KAAvC,EAA8CjB,OAA9C,CAAP;AACD,CApCD","sourcesContent":["'use strict';\n\nconst inherits = require('inherits');\nconst Buffer = require('safer-buffer').Buffer;\n\nconst DERDecoder = require('./der');\n\nfunction PEMDecoder(entity) {\n  DERDecoder.call(this, entity);\n  this.enc = 'pem';\n}\ninherits(PEMDecoder, DERDecoder);\nmodule.exports = PEMDecoder;\n\nPEMDecoder.prototype.decode = function decode(data, options) {\n  const lines = data.toString().split(/[\\r\\n]+/g);\n\n  const label = options.label.toUpperCase();\n\n  const re = /^-----(BEGIN|END) ([^-]+)-----$/;\n  let start = -1;\n  let end = -1;\n  for (let i = 0; i < lines.length; i++) {\n    const match = lines[i].match(re);\n    if (match === null)\n      continue;\n\n    if (match[2] !== label)\n      continue;\n\n    if (start === -1) {\n      if (match[1] !== 'BEGIN')\n        break;\n      start = i;\n    } else {\n      if (match[1] !== 'END')\n        break;\n      end = i;\n      break;\n    }\n  }\n  if (start === -1 || end === -1)\n    throw new Error('PEM section not found for: ' + label);\n\n  const base64 = lines.slice(start + 1, end).join('');\n  // Remove excessive symbols\n  base64.replace(/[^a-z0-9+/=]+/gi, '');\n\n  const input = Buffer.from(base64, 'base64');\n  return DERDecoder.prototype.decode.call(this, input, options);\n};\n"]},"metadata":{},"sourceType":"script"}